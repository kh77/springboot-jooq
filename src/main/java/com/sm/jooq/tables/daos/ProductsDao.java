/*
 * This file is generated by jOOQ.
 */
package com.sm.jooq.tables.daos;


import com.sm.jooq.tables.Products;
import com.sm.jooq.tables.records.ProductsRecord;

import java.math.BigDecimal;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProductsDao extends DAOImpl<ProductsRecord, com.sm.jooq.tables.pojos.Products, Long> {

    /**
     * Create a new ProductsDao without any configuration
     */
    public ProductsDao() {
        super(Products.PRODUCTS, com.sm.jooq.tables.pojos.Products.class);
    }

    /**
     * Create a new ProductsDao with an attached configuration
     */
    @Autowired
    public ProductsDao(Configuration configuration) {
        super(Products.PRODUCTS, com.sm.jooq.tables.pojos.Products.class, configuration);
    }

    @Override
    public Long getId(com.sm.jooq.tables.pojos.Products object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Products.PRODUCTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchById(Long... values) {
        return fetch(Products.PRODUCTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.sm.jooq.tables.pojos.Products fetchOneById(Long value) {
        return fetchOne(Products.PRODUCTS.ID, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchByDescription(String... values) {
        return fetch(Products.PRODUCTS.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchByName(String... values) {
        return fetch(Products.PRODUCTS.NAME, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchRangeOfPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.sm.jooq.tables.pojos.Products> fetchByPrice(BigDecimal... values) {
        return fetch(Products.PRODUCTS.PRICE, values);
    }
}
